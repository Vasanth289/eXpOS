alias functionNum R1;
alias currentPID R2;

// disk load()
if (functionNum == 2) then
	alias pnum R3;
	alias bnum R4;
	multipush(R1, R2, R3, R4);
	R1 = 3;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3, R4);
	//[DISK_STATUS_TABLE + 0] = 1;
	[DISK_STATUS_TABLE + 1] = 0;
	[DISK_STATUS_TABLE + 2] = pnum;
	[DISK_STATUS_TABLE + 3] = bnum;
	//[DISK_STATUS_TABLE + 4] = currentPID;
	load(pnum, bnum);
	[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_DISK;
	multipush(R1, R2, R3, R4);
	call SCHEDULER;
	multipop(R1, R2, R3, R4);
	return;
endif;

// terminal write()
if (functionNum == 3) then
	multipush(R1, R2, R3);
	R1 = 8;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3);
	print R3;
	multipush(R1, R2);
	R1 = 9;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop(R1, R2);
	return;
endif;

// terminal read()
if (functionNum == 4) then
	multipush(R1, R2, R3);
	R1 = 8;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3);
	read;
	[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
	multipush(R1, R2, R3);
	call SCHEDULER;
	multipop(R1, R2, R3);
	alias physicalAddr R4;
	physicalAddr = ([PTBR + 2 * (R3 / 512)] * 512) + (R3 % 512);
	[physicalAddr] = [PROCESS_TABLE + (currentPID * 16) + 8];
	return;
endif;

return;
