[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = -1;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
backup;

multipush(EIP);

if (EC == 1) then
	print("Illegal instr");
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call PROCESS_MANAGER;
	call SCHEDULER;
endif;

if (EC == 2) then
	print("I.M.A");
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call PROCESS_MANAGER;
	call SCHEDULER;
endif;

if (EC == 3) then
	print("A.E");
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call PROCESS_MANAGER;
	call SCHEDULER;
endif;

if ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] == (PTLR * 512 - 1)) then
	print("Stack full");
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call PROCESS_MANAGER;
	call SCHEDULER;
endif;

if (EC == 0) then
	if ((EPN >= 4) && (EPN <= 7)) then
		multipush(R0,R1,R2,R3,R4,R5,R6,R7);
		R1 = 5;
		R2 = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + EPN];
		call MEMORY_MANAGER;
		[PTBR + EPN*2] = R0;
		[PTBR + EPN*2 + 1] = "1100";
		multipop(R0,R1,R2,R3,R4,R5,R6,R7);
	endif;

	if ((EPN >= 2) && (EPN <= 3)) then
		multipush(R0,R1,R2,R3,R4,R5,R6,R7);
		R1 = 1;
		call MEMORY_MANAGER;
		[PTBR + 4] = R0;
		[PTBR + 5] = "1110";
		multipop(R0,R1,R2,R3,R4,R5,R6,R7);
		
		multipush(R0,R1,R2,R3,R4,R5,R6,R7);
		R1 = 1;
		call MEMORY_MANAGER;
		[PTBR + 6] = R0;
		[PTBR + 7] = "1110";
		multipop(R0,R1,R2,R3,R4,R5,R6,R7);
	endif;

	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;

	multipop(EIP);

	restore;

	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	SP = SP + 1;
	[[PTBR + 2*(SP / 512)] * 512 + (SP % 512)] = EIP;
	ireturn;
endif;
