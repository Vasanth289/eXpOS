alias funcNum R1;
alias pid R2;

// free_user_page()
if(funcNum == 2) then
	alias userAreaPgNo R3;
	userAreaPgNo = [PROCESS_TABLE + (pid * 16) + 11];
	multipush(R1, R2, R3);
	R1 = 2;
	R2 = userAreaPgNo;
	call MEMORY_MANAGER;
	multipop(R1, R2, R3);
	return;
endif;

// exit_process()
if(funcNum == 3) then
	multipush(R1, R2);
	R1 = 4;
	R2 = pid;
	call PROCESS_MANAGER;
	multipop(R1, R2);
	multipush(R1, R2);
	R1 = 2;
	R2 = pid;
	call PROCESS_MANAGER;
	multipop(R1, R2);
	[PROCESS_TABLE + pid*16 + 4] = TERMINATED;
	return;
endif;

// free_page_table()
if(funcNum == 4) then
	alias i R5;
	i = 0;
	while(i < 2) do
		[PAGE_TABLE_BASE + pid*20 + i*2] = -1;
		[PAGE_TABLE_BASE + pid*20 + 1 + i*2] = "0000";
		i = i + 1;
	endwhile;
	i = 2;
	while(i < 10) do
		if([PAGE_TABLE_BASE + pid*20 + i*2] != -1) then
			multipush(R1, R2, R3, R5);
			R1 = 2;
			R2 = [PAGE_TABLE_BASE + pid*20 + i*2];
			call MEMORY_MANAGER;
			multipop(R1, R2, R3, R5);
			[PAGE_TABLE_BASE + pid*20 + i*2] = -1;
			[PAGE_TABLE_BASE + pid*20 + 1 + i*2] = "0000";
		endif;
		i = i + 1;
	endwhile;
	i = 2;
	while (i < 4) do
		if ([DISK_MAP_TABLE + pid*10 + i] != -1) then
			multipush(R1, R2, R3, R5);
			R1 = 4;
			R3 = pid;
			R2 = [DISK_MAP_TABLE + pid*10 + i];
			call MEMORY_MANAGER;
			multipop(R1, R2, R3, R5);
		endif;
		i = i + 1;
	endwhile;
	i = 8;
	while (i < 10) do
		if ([DISK_MAP_TABLE + pid*10 + i] != -1) then
			multipush(R1, R2, R3, R5);
			R1 = 4;
			R3 = pid;
			R2 = [DISK_MAP_TABLE + pid*10 + i];
			call MEMORY_MANAGER;
			multipop(R1, R2, R3, R5);
		endif;
		i = i + 1;
	endwhile;
	i = 2;
	while(i < 10) do
		[DISK_MAP_TABLE + pid*10 + i] = -1;
		i = i + 1;
	endwhile;
	return;
endif;
