alias funcNum R1;
alias pid R2;

// get_pcb_entry()
if(funcNum == 1) then
	alias cpid R3;
	cpid = 1;
	while (cpid < 16) do
		if([PROCESS_TABLE + cpid*16 + 4] == TERMINATED) then
			[PROCESS_TABLE + cpid*16 + 1] = cpid;
			[PROCESS_TABLE + cpid*16 + 4] = ALLOCATED;
			[PROCESS_TABLE + cpid*16 + 14] = PAGE_TABLE_BASE + cpid*20;
			[PROCESS_TABLE + cpid*16 + 15] = 10;
			R0 = cpid;
			return;
		endif;
		cpid = cpid + 1;
	endwhile;
	
	R0 = -1;
	return;
endif;

// free_user_page()
if(funcNum == 2) then
	alias userAreaPgNo R3;
	userAreaPgNo = [PROCESS_TABLE + (pid * 16) + 11];
	multipush(R1, R2, R3);
	R1 = 2;     // release page()
	R2 = userAreaPgNo;
	call MEMORY_MANAGER;
	multipop(R1, R2, R3);
	
	alias i R4;
	i = 0;
	while (i < 8) do
		if ([(userAreaPgNo*512) + 496 + i*2] == SEMAPHORE) then
			R5 = [(userAreaPgNo*512) + 496 + i*2 + 1];
			multipush(R1, R2, R3, R4);
			R1 = 7;         // release semaphore
			R2 = pid;
			R3 = R5;
			call RESOURCE_MANAGER;
			multipop(R1, R2, R3, R4);
		endif;
		i = i + 1;
	endwhile;
	return;
endif;

// exit_process()
if(funcNum == 3) then
	if ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] != 9) then
		alias i R3;
		i = 0;
		while (i < 16) do
			if (([PROCESS_TABLE + (i * 16) + 4] == WAIT_PROCESS) && ([PROCESS_TABLE + (i * 16) + 5] == [SYSTEM_STATUS_TABLE + 1])) then
				[PROCESS_TABLE + (i * 16) + 4] = READY;
			endif;
			
			if ([PROCESS_TABLE + (i * 16) + 2] == [SYSTEM_STATUS_TABLE + 1]) then
				[PROCESS_TABLE + (i * 16) + 2] = -1;
			endif;
			i = i + 1;
		endwhile;
	endif;
	
	multipush(R1, R2);
	R1 = 4;
	R2 = pid;
	call PROCESS_MANAGER;
	multipop(R1, R2);
	multipush(R1, R2);
	R1 = 2;
	R2 = pid;
	call PROCESS_MANAGER;
	multipop(R1, R2);
	[PROCESS_TABLE + pid*16 + 4] = TERMINATED;
	return;
endif;

// free_page_table()
if(funcNum == 4) then
	alias i R5;
	i = 0;
	while(i < 2) do
		[PAGE_TABLE_BASE + pid*20 + i*2] = -1;
		[PAGE_TABLE_BASE + pid*20 + 1 + i*2] = "0000";
		i = i + 1;
	endwhile;
	i = 2;
	while(i < 10) do
		if([PAGE_TABLE_BASE + pid*20 + i*2] != -1) then
			multipush(R1, R2, R3, R5);
			R1 = 2;
			R2 = [PAGE_TABLE_BASE + pid*20 + i*2];
			call MEMORY_MANAGER;
			multipop(R1, R2, R3, R5);
			[PAGE_TABLE_BASE + pid*20 + i*2] = -1;
			[PAGE_TABLE_BASE + pid*20 + 1 + i*2] = "0000";
		endif;
		i = i + 1;
	endwhile;
	i = 2;
	while (i < 4) do
		if ([DISK_MAP_TABLE + pid*10 + i] != -1) then
			multipush(R1, R2, R3, R5);
			R1 = 4;
			R3 = pid;
			R2 = [DISK_MAP_TABLE + pid*10 + i];
			call MEMORY_MANAGER;
			multipop(R1, R2, R3, R5);
		endif;
		i = i + 1;
	endwhile;
	i = 8;
	while (i < 10) do
		if ([DISK_MAP_TABLE + pid*10 + i] != -1) then
			multipush(R1, R2, R3, R5);
			R1 = 4;
			R3 = pid;
			R2 = [DISK_MAP_TABLE + pid*10 + i];
			call MEMORY_MANAGER;
			multipop(R1, R2, R3, R5);
		endif;
		i = i + 1;
	endwhile;
	i = 2;
	while(i < 10) do
		[DISK_MAP_TABLE + pid*10 + i] = -1;
		i = i + 1;
	endwhile;
	return;
endif;
