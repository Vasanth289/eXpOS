breakpoint;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 8;

alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

multipush(R0,R1);
R1 = 1;
call PROCESS_MANAGER;
alias cpid R2;
cpid = R0;
multipop(R0,R1);
breakpoint;

if (cpid == -1) then
	alias physicalAddrRetValue R3;
	physicalAddrRetValue = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetValue] = -1;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	ireturn;
endif;

if ([PTBR + 4] == -1) then
	multipush(R0, R1, R2);
	R1 = 1;
	call MEMORY_MANAGER;
	[PTBR + 4] = R0;
	multipop(R0, R1, R2);
	[PTBR + 5] = "0110";
	
	multipush(R0, R1, R2);
	R1 = 1;
	call MEMORY_MANAGER;
	[PTBR + 6] = R0;
	multipop(R0, R1, R2);
	[PTBR + 7] = "0110";
endif;

// stack 8
multipush(R0, R1, R2);
R1 = 1;
call MEMORY_MANAGER;
R10 = R0;
multipop(R0, R1, R2);
[PAGE_TABLE_BASE + cpid*20 + 16] = R10;
[PAGE_TABLE_BASE + cpid*20 + 17] = "0110";
// stack 9
multipush(R0, R1, R2);
R1 = 1;
call MEMORY_MANAGER;
R10 = R0;
multipop(R0, R1, R2);
[PAGE_TABLE_BASE + cpid*20 + 18] = R10;
[PAGE_TABLE_BASE + cpid*20 + 19] = "0110";

// user area page
multipush(R0, R1, R2);
R1 = 1;
call MEMORY_MANAGER;
R10 = R0;
multipop(R0, R1, R2);
[PROCESS_TABLE + cpid*16 + 11] = R10;

[PROCESS_TABLE + cpid*16 + 0] = 0;
[PROCESS_TABLE + cpid*16 + 2] = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + cpid*16 + 3] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 3];
[PROCESS_TABLE + cpid*16 + 4] = CREATED;
[PROCESS_TABLE + cpid*16 + 6] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 6];
[PROCESS_TABLE + cpid*16 + 7] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 7];
[PROCESS_TABLE + cpid*16 + 9] = 0;
[PROCESS_TABLE + cpid*16 + 10] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 10];
[PROCESS_TABLE + cpid*16 + 12] = 0;
[PROCESS_TABLE + cpid*16 + 13] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];

// copy resource table
alias i R3;
alias parentUAPN R4;
alias childUAPN R5;

parentUAPN = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11];
childUAPN = [PROCESS_TABLE + cpid*16 + 11];
i = 0;
while (i < 8) do
	[(childUAPN * 512) + 496 + i*2] = [(parentUAPN * 512) + 496 + i*2];
	[(childUAPN * 512) + 496 + i*2 + 1] = [(parentUAPN * 512) + 496 + i*2 + 1];
	i = i + 1;
endwhile;

// copy disk map table
i = 2;
while (i < 10) do
	[DISK_MAP_TABLE + (cpid*10) + i] = [DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1]*10) + i];
	i = i + 1;
endwhile;

// copy page table
i = 0;
while (i < 16) do
	[PAGE_TABLE_BASE + cpid*20 + i] = [PTBR + i];
	if (i%2 == 0) then
		[MEMORY_FREE_LIST + [PTBR + i]] = [MEMORY_FREE_LIST + [PTBR + i]] + 1;
	endif;
	i = i + 1;
endwhile;

// copy stack pages
i = 0;
while (i < 512) do
	[[PAGE_TABLE_BASE + cpid*20 + 16]*512 + i] = [[PTBR + 16]*512 + i];
	i = i + 1;
endwhile;
i = 0;
while (i < 512) do
	[[PAGE_TABLE_BASE + cpid*20 + 18]*512 + i] = [[PTBR + 18]*512 + i];
	i = i + 1;
endwhile;

[childUAPN * 512] = BP;

alias physicalAddrRetValue R6;
physicalAddrRetValue = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
[physicalAddrRetValue] = cpid;

physicalAddrRetValue = ([PAGE_TABLE_BASE + cpid*20 + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
[physicalAddrRetValue] = 0;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
ireturn;
