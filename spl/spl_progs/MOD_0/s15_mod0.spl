alias functionNum R1;
alias currentPID R2;

// acquire terminal()
if (functionNum == 8) then
	while ([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_TERMINAL;
		multipush(R1, R2);
		call SCHEDULER;
		multipop(R1, R2);
	endwhile;

	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	breakpoint;
	return;
endif;

// release terminal()
if (functionNum == 9) then
	if (currentPID != [TERMINAL_STATUS_TABLE + 1]) then
		R0 = -1;
		return;
	else
		[TERMINAL_STATUS_TABLE] = 0;
		alias PID R3;
		alias process_table R4;
		PID = 0;
		while (PID < 16) do
			process_table = PROCESS_TABLE + PID * 16;
			if([process_table + 4] == WAIT_TERMINAL) then
				[process_table + 4] = READY;
			endif;
			PID = PID + 1;
		endwhile;
		R0 = 0;
		return;
	endif;
endif;
