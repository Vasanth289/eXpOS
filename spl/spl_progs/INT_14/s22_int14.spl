alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;


alias syscall R1;
syscall = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + ((userSP - 5) % 512)];

// semlock()
if (syscall == 19) then
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 19;
	
	alias UPAN R2;
	alias semid R3;
	
	UPAN = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11];
	semid = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];
	
	if (semid < 0 || semid > 7 || [(UPAN * 512) + 496 + semid*2] != SEMAPHORE) then
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
		SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
		ireturn;
	endif;
	
	alias semidx R4;
	
	semidx = [(UPAN * 512) + 496 + semid*2 + 1];
	while ([SEMAPHORE_TABLE + semidx*4] != -1 && [SEMAPHORE_TABLE + semidx*4] != [SYSTEM_STATUS_TABLE + 1]) do
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_SEMAPHORE;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 5] = semidx;
		multipush(R0, R1, R2, R3, R4);
		call SCHEDULER;
		multipop(R0, R1, R2, R3, R4);
	endwhile;
	
	[SEMAPHORE_TABLE + semidx*4] = [SYSTEM_STATUS_TABLE + 1];
	
	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = 0;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	ireturn;
endif;

// semunlock()
if (syscall == 20) then
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 20;
	
	alias UPAN R2;
	alias semid R3;
	
	UPAN = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11];
	semid = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];
	
	if (semid < 0 || semid > 7 || [(UPAN * 512) + 496 + semid*2] != SEMAPHORE) then
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
		SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
		ireturn;
	endif;
	
	alias semidx R4;
	
	semidx = [(UPAN * 512) + 496 + semid*2 + 1];
	
	if ([SEMAPHORE_TABLE + semidx*4] != -1) then
		if ([SEMAPHORE_TABLE + semidx*4] != [SYSTEM_STATUS_TABLE + 1]) then
			[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -2;
			[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
			SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
			ireturn;
		else
			[SEMAPHORE_TABLE + semidx*4] = -1;
			
			alias i R5;
			i = 0;
			while (i < 16) do
				if ([PROCESS_TABLE + i*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + i*16 + 5] == semidx) then
					[PROCESS_TABLE + i*16 + 4] = READY;
				endif;
				i = i + 1;
			endwhile;
			
			[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = 0;
			[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
			SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
			ireturn;
		endif;
	endif;
endif;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
ireturn;
