alias funcNum R1;

// get_free_page()
if (funcNum == 1) then
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
	while ([SYSTEM_STATUS_TABLE + 2] == 0) do
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_MEM;
		multipush(R1);
		call SCHEDULER;
		multipop(R1);
	endwhile;
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
	alias i R2;
	i = 76;
	while (i < 128) do
		if([MEMORY_FREE_LIST + i] == 0) then
			[MEMORY_FREE_LIST + i] = 1;
			R0 = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	return;
endif;

// release_page()
if (funcNum == 2) then
	alias page_num R2;
	[MEMORY_FREE_LIST + page_num] = [MEMORY_FREE_LIST + page_num] - 1;
	if([MEMORY_FREE_LIST + page_num] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
	endif;
	alias i R3;
	i = 0;
	while(i < 16) do
		if([PROCESS_TABLE + i*16 + 4] == WAIT_MEM) then
			[PROCESS_TABLE + i*16 + 4] = READY;
		endif;
		i = i + 1;
	endwhile;
	return;
endif;
