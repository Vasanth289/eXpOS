alias funcNum R1;

// get_free_page()
if (funcNum == 1) then
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
	while ([SYSTEM_STATUS_TABLE + 2] == 0) do
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_MEM;
		multipush(R1);
		call SCHEDULER;
		multipop(R1);
	endwhile;
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
	alias i R2;
	i = 0;
	while (i < 128) do
		if([MEMORY_FREE_LIST + i] == 0) then
			[MEMORY_FREE_LIST + i] = 1;
			R0 = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	[INODE_TABLE + 12] = [INODE_TABLE + 12] + 1;
	return;
endif;

// release_page()
if (funcNum == 2) then
	alias page_num R2;
	[MEMORY_FREE_LIST + page_num] = [MEMORY_FREE_LIST + page_num] - 1;
	if([MEMORY_FREE_LIST + page_num] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
	endif;
	alias i R3;
	i = 0;
	while(i < 16) do
		if([PROCESS_TABLE + i*16 + 4] == WAIT_MEM) then
			[PROCESS_TABLE + i*16 + 4] = READY;
		endif;
		i = i + 1;
	endwhile;
	return;
endif;

// release_block()
if (funcNum == 4) then
	[DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
	return;
endif;

// get_code_page()
if (funcNum == 5) then
	alias bno R2;
	alias i R11;
	alias j R12;
	i = 0;
	while (i < 16) do
		j = 4;
		while (j < 8) do
			if ([DISK_MAP_TABLE + i*10 + j] == bno && [PAGE_TABLE_BASE + i*20 + j*2] != -1) then
				alias pgno R13;
				pgno = [PAGE_TABLE_BASE + i*20 + j*2];
				[MEMORY_FREE_LIST + pgno] = [MEMORY_FREE_LIST + pgno] + 1;
				R0 = pgno;
				return;
			endif;
			j = j + 1;
		endwhile;
		i = i + 1;
	endwhile;
	multipush(R1, R2);
	R1 = 1;
	call MEMORY_MANAGER;
	multipop(R1, R2);
	alias pgno R11;
	pgno = R0;
	multipush(R1,R2,R11);
	R1 = 2;
	R4 = bno;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = pgno;
	call DEVICE_MANAGER;
	multipop(R1,R2,R11);
	R0 = pgno;
	return;
endif;
